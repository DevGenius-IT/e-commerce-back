# Production override for docker-compose.yml
# Usage: docker compose -f docker-compose.yml -f docker-compose.production.yml up -d

services:
  # ═══════════════════════════════════════
  # NGINX REVERSE PROXY
  # ═══════════════════════════════════════
  nginx:
    image: nginx:alpine
    container_name: e-commerce-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/nginx/ssl:ro
      - certbot-webroot:/var/www/certbot:ro
      - nginx-logs:/var/log/nginx
    networks:
      - microservices-network
    depends_on:
      - api-gateway
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ═══════════════════════════════════════
  # API GATEWAY
  # ═══════════════════════════════════════
  api-gateway:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ═══════════════════════════════════════
  # AUTH SERVICE
  # ═══════════════════════════════════════
  auth-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute=echo 'ok';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ═══════════════════════════════════════
  # MESSAGES BROKER
  # ═══════════════════════════════════════
  messages-broker:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ═══════════════════════════════════════
  # MICROSERVICES
  # ═══════════════════════════════════════
  addresses-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: &default-logging
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  products-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  baskets-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  orders-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  deliveries-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  contacts-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  newsletters-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  sav-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  websites-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  questions-service:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    restart: always
    logging: *default-logging

  # ═══════════════════════════════════════
  # DATABASES
  # ═══════════════════════════════════════
  auth-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  products-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  baskets-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  orders-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  deliveries-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  addresses-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  contacts-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  newsletters-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  sav-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  websites-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  questions-db:
    restart: always
    command: --default-authentication-plugin=mysql_native_password --max_connections=200
    deploy:
      resources:
        limits:
          memory: 512M
    logging: *default-logging

  # ═══════════════════════════════════════
  # RABBITMQ
  # ═══════════════════════════════════════
  rabbitmq:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging: *default-logging

  # ═══════════════════════════════════════
  # MINIO
  # ═══════════════════════════════════════
  minio:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging: *default-logging

  # ═══════════════════════════════════════
  # REDIS
  # ═══════════════════════════════════════
  redis:
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    logging: *default-logging

volumes:
  certbot-webroot:
    driver: local
  nginx-logs:
    driver: local

networks:
  microservices-network:
    driver: bridge
