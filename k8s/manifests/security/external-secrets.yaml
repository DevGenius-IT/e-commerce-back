# External Secrets Operator configuration
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: external-secrets-operator
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.external-secrets.io
    chart: external-secrets
    targetRevision: "0.9.9"
    helm:
      values: |
        installCRDs: true
        replicaCount: 2
        
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        
        webhook:
          create: true
          port: 9443
        
        certController:
          create: true
          requeueInterval: 120s

  destination:
    server: https://kubernetes.default.svc
    namespace: external-secrets-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

---
# Vault SecretStore for production secrets
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: e-commerce
spec:
  provider:
    vault:
      server: "https://vault.yourcompany.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "e-commerce-role"
          secretRef:
            name: vault-token
            key: token

---
# AWS Secrets Manager SecretStore (alternative)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-store
  namespace: e-commerce
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: aws-credentials
            key: access-key-id
          secretAccessKeySecretRef:
            name: aws-credentials
            key: secret-access-key

---
# External Secret for JWT secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: jwt-secrets
  namespace: e-commerce
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: global-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_SECRET: "{{ .jwt_secret }}"
        APP_KEY: "{{ .app_key }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: e-commerce/global
      property: jwt_secret
  - secretKey: app_key
    remoteRef:
      key: e-commerce/global
      property: app_key

---
# External Secret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-secrets
  namespace: e-commerce
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: mysql-root-secret
    creationPolicy: Owner
  data:
  - secretKey: rootPassword
    remoteRef:
      key: e-commerce/database
      property: root_password
  - secretKey: rootHost
    remoteRef:
      key: e-commerce/database
      property: root_host

---
# External Secret for RabbitMQ credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rabbitmq-secrets
  namespace: e-commerce-messaging
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: rabbitmq-admin-secret
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: e-commerce/rabbitmq
      property: admin_username
  - secretKey: password
    remoteRef:
      key: e-commerce/rabbitmq
      property: admin_password

---
# External Secret for monitoring credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: monitoring
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: grafana-admin-secret
    creationPolicy: Owner
  data:
  - secretKey: admin-user
    remoteRef:
      key: e-commerce/monitoring
      property: grafana_admin_user
  - secretKey: admin-password
    remoteRef:
      key: e-commerce/monitoring
      property: grafana_admin_password

---
# Service Account for Vault authentication
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-vault
  namespace: e-commerce
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-vault
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-vault
subjects:
- kind: ServiceAccount
  name: external-secrets-vault
  namespace: e-commerce