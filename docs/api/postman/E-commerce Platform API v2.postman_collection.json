{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "E-commerce Platform API v2.0 - Modern Architecture",
    "description": "# E-commerce Platform API v2.0\n\n## üèóÔ∏è Modern Microservices Architecture\n\n**Base URL**: `http://localhost` (Docker) | `https://api.yourdomain.com` (Kubernetes)\n\n### üéØ Architecture Overview\n- **API Gateway**: Single entry point for all requests\n- **Nginx Reverse Proxy**: Load balancing and SSL termination\n- **RabbitMQ**: Asynchronous inter-service communication\n- **JWT Authentication**: Centralized auth with role-based permissions\n- **13 Microservices**: Domain-driven architecture\n\n### üîÑ Request Flow\n```\nClient ‚Üí Nginx ‚Üí API Gateway ‚Üí RabbitMQ ‚Üí Target Service ‚Üí Response\n```\n\n### üöÄ Quick Start\n1. Run `make docker-start` or `make k8s-deploy`\n2. Execute **Authentication > Login** to get JWT token\n3. Token is auto-saved for authenticated endpoints\n4. Use **Health Checks** to verify services\n\n### üìö Available Services\n- **auth-service**: Authentication & authorization\n- **products-service**: Product catalog & inventory\n- **baskets-service**: Shopping cart & promotions\n- **orders-service**: Order processing & management\n- **deliveries-service**: Shipping & tracking\n- **addresses-service**: Address management\n- **sav-service**: Customer support\n- **questions-service**: FAQ & knowledge base\n- **contacts-service**: Contact management\n- **newsletters-service**: Email campaigns\n- **websites-service**: Multi-site management\n\n### üîß Environment Variables\nThe collection uses environment variables for easy configuration:\n- `{{base_url}}`: API base URL\n- `{{jwt_token}}`: Auto-managed JWT token\n- `{{user_id}}`: Current user ID\n- Various test IDs for E2E scenarios\n\n### üß™ Testing\nEach request includes automated tests for:\n- Response status validation\n- Data structure verification\n- Token management\n- Error handling\n\nVersion: 2.0 | Updated: 2025-01-15",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "ecommerce-platform-2025"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('üöÄ Request to:', pm.request.url.toString());",
          "",
          "// Check if JWT token exists and is not expired",
          "const token = pm.environment.get('jwt_token');",
          "if (token && token !== '') {",
          "    try {",
          "        const payload = JSON.parse(atob(token.split('.')[1]));",
          "        const now = Math.floor(Date.now() / 1000);",
          "        if (payload.exp && payload.exp < now) {",
          "            console.log('‚ö†Ô∏è JWT token expired, please login again');",
          "            pm.environment.set('jwt_token', '');",
          "        }",
          "    } catch (e) {",
          "        console.log('‚ö†Ô∏è Invalid JWT token format');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('‚ùå Error Response:', pm.response.json());",
          "} else {",
          "    console.log('‚úÖ Success Response Status:', pm.response.code);",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "api_version",
      "value": "v2.0",
      "type": "string"
    },
    {
      "key": "collection_version",
      "value": "2025.01.15",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Health & Monitoring",
      "description": "System health checks and monitoring endpoints",
      "item": [
        {
          "name": "API Gateway Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Gateway is healthy', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('healthy');",
                  "    pm.expect(responseJson.service).to.eql('api-gateway');",
                  "});",
                  "",
                  "pm.test('Response structure is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('service');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": ["{{base_url}}"],
              "path": ["api", "health"]
            },
            "description": "Check API Gateway health status - Main entry point verification"
          },
          "response": []
        },
        {
          "name": "RabbitMQ Connection Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('RabbitMQ connection is healthy', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql('success');",
                  "    pm.expect(responseJson.rabbitmq_connected).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains connection info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/test-rabbitmq",
              "host": ["{{base_url}}"],
              "path": ["api", "test-rabbitmq"]
            },
            "description": "Test RabbitMQ connectivity from API Gateway"
          },
          "response": []
        },
        {
          "name": "Services Status Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Services list is provided', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array').that.is.not.empty;",
                  "});",
                  "",
                  "pm.test('Services have required properties', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.forEach(service => {",
                  "        pm.expect(service).to.have.property('name');",
                  "        pm.expect(service).to.have.property('status');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/services/status",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "services", "status"]
            },
            "description": "Get status overview of all microservices"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîê Authentication & Authorization",
      "description": "User authentication, JWT token management, and role-based access control",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains JWT token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "    pm.expect(responseJson.token).to.be.a('string').that.is.not.empty;",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.user).to.have.property('id');",
                  "    pm.expect(responseJson.user).to.have.property('email');",
                  "});",
                  "",
                  "// Auto-save JWT token and user ID",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.token) {",
                  "        pm.environment.set('jwt_token', responseJson.token);",
                  "        console.log('üîë JWT Token saved successfully');",
                  "    }",
                  "    if (responseJson.user && responseJson.user.id) {",
                  "        pm.environment.set('user_id', responseJson.user.id);",
                  "        pm.environment.set('user_email', responseJson.user.email);",
                  "        console.log('üë§ User data saved:', responseJson.user.email);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Authenticate user and receive JWT token for API access"
          },
          "response": []
        },
        {
          "name": "Get Current User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User profile is returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('email');",
                  "    pm.expect(responseJson).to.have.property('created_at');",
                  "});",
                  "",
                  "pm.test('User ID matches environment', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const savedUserId = pm.environment.get('user_id');",
                  "    if (savedUserId) {",
                  "        pm.expect(responseJson.id.toString()).to.eql(savedUserId);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "me"]
            },
            "description": "Get current authenticated user profile information"
          },
          "response": []
        },
        {
          "name": "Validate JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('valid');",
                  "    pm.expect(responseJson.valid).to.be.true;",
                  "});",
                  "",
                  "pm.test('User data is included', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{jwt_token}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/validate-token",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "validate-token"]
            },
            "description": "Validate current JWT token and get user information"
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Logout successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "// Clear saved tokens on successful logout",
                  "if (pm.response.code === 200) {",
                  "    pm.environment.set('jwt_token', '');",
                  "    pm.environment.set('user_id', '');",
                  "    pm.environment.set('user_email', '');",
                  "    console.log('üö™ User logged out, tokens cleared');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "logout"]
            },
            "description": "Logout current user and invalidate JWT token"
          },
          "response": []
        }
      ]
    }
  ]
}