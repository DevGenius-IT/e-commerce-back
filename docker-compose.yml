services:
  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    ports:
      - "8100:8000"
    volumes:
      - ./services/api-gateway:/var/www/api-gateway
      - /var/www/api-gateway/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - ADDRESSES_SERVICE_URL=${ADDRESSES_SERVICE_URL}
      - PRODUCTS_SERVICE_URL=${PRODUCTS_SERVICE_URL}
      - BASKETS_SERVICE_URL=${BASKETS_SERVICE_URL}
      - ORDERS_SERVICE_URL=${ORDERS_SERVICE_URL}
      - DELIVERIES_SERVICE_URL=${DELIVERIES_SERVICE_URL}
      - NEWSLETTERS_SERVICE_URL=${NEWSLETTERS_SERVICE_URL}
      - SAV_SERVICE_URL=${SAV_SERVICE_URL}
      - MESSAGES_BROKER_URL=${MESSAGES_BROKER_URL}
    develop:
      watch:
        - action: sync
          path: services/api-gateway
          target: /var/www/api-gateway
          ignore:
            - vendor/
        - action: rebuild
          path: services/api-gateway/composer.json
    networks:
      - microservices-network
    depends_on:
      - rabbitmq

  auth-service:
    build:
      context: .
      dockerfile: ./services/auth-service/Dockerfile
    volumes:
      - ./services/auth-service:/var/www/auth-service
      - /var/www/auth-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_AUTH_HOST}
    develop:
      watch:
        - action: sync
          path: services/auth-service
          target: /var/www/auth-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/auth-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - auth-db
      
  auth-db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: auth_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_AUTH_EXTERNAL_PORT}:3306
    networks:
      - microservices-network

  messages-broker:
    build:
      context: .
      dockerfile: ./services/messages-broker/Dockerfile
    volumes:
      - ./services/messages-broker:/var/www/messages-broker
      - /var/www/messages-broker/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_MESSAGES_BROKER_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    develop:
      watch:
        - action: sync
          path: services/messages-broker
          target: /var/www/messages-broker
          ignore:
            - vendor/
        - action: rebuild
          path: services/messages-broker/composer.json
    networks:
      - microservices-network
    depends_on:
      - messages-broker-db
      - rabbitmq

  messages-broker-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: messages_broker
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_MESSAGES_BROKER_EXTERNAL_PORT}:3306
    networks:
      - microservices-network

  addresses-service:
    build:
      context: .
      dockerfile: ./services/addresses-service/Dockerfile
    volumes:
      - ./services/addresses-service:/var/www/addresses-service
      - /var/www/addresses-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_ADDRESSES_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
    develop:
      watch:
        - action: sync
          path: services/addresses-service
          target: /var/www/addresses-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/addresses-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - addresses-db
      - rabbitmq

  addresses-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: addresses_service
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_ADDRESSES_EXTERNAL_PORT}:3306
    networks:
      - microservices-network

  products-service:
    build:
      context: .
      dockerfile: ./services/products-service/Dockerfile
    volumes:
      - ./services/products-service:/var/www/products-service
      - ./shared:/var/www/shared
      - /var/www/products-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_PRODUCTS_HOST}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-adminpass123}
      - MINIO_BUCKET=products
      - MINIO_USE_SSL=false
    develop:
      watch:
        - action: sync
          path: services/products-service
          target: /var/www/products-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/products-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - products-db
      - minio

  products-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: products_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_PRODUCTS_EXTERNAL_PORT}:3306
    networks:
      - microservices-network

  baskets-service:
    build:
      context: .
      dockerfile: ./services/baskets-service/Dockerfile
    volumes:
      - ./services/baskets-service:/var/www/baskets-service
      - ./shared:/var/www/shared
      - /var/www/baskets-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_BASKETS_HOST}
    develop:
      watch:
        - action: sync
          path: services/baskets-service
          target: /var/www/baskets-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/baskets-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - baskets-db

  baskets-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: baskets_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_BASKETS_EXTERNAL_PORT}:3306
    volumes:
      - baskets-db-data:/var/lib/mysql
    networks:
      - microservices-network

  orders-service:
    build:
      context: .
      dockerfile: ./services/orders-service/Dockerfile
    volumes:
      - ./services/orders-service:/var/www/orders-service
      - ./shared:/var/www/shared
      - /var/www/orders-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_ORDERS_HOST}
    develop:
      watch:
        - action: sync
          path: services/orders-service
          target: /var/www/orders-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/orders-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - orders-db

  orders-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: orders_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_ORDERS_EXTERNAL_PORT}:3306
    volumes:
      - orders-db-data:/var/lib/mysql
    networks:
      - microservices-network

  deliveries-service:
    build:
      context: .
      dockerfile: ./services/deliveries-service/Dockerfile
    volumes:
      - ./services/deliveries-service:/var/www/deliveries-service
      - ./shared:/var/www/shared
      - /var/www/deliveries-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_DELIVERIES_HOST}
    develop:
      watch:
        - action: sync
          path: services/deliveries-service
          target: /var/www/deliveries-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/deliveries-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - deliveries-db

  deliveries-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: deliveries_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_DELIVERIES_EXTERNAL_PORT}:3306
    volumes:
      - deliveries-db-data:/var/lib/mysql
    networks:
      - microservices-network

  newsletters-service:
    build:
      context: .
      dockerfile: ./services/newsletters-service/Dockerfile
    volumes:
      - ./services/newsletters-service:/var/www/newsletters-service
      - ./shared:/var/www/shared
      - /var/www/newsletters-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_NEWSLETTERS_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-adminpass123}
      - MINIO_BUCKET=newsletters
      - MINIO_USE_SSL=false
    develop:
      watch:
        - action: sync
          path: services/newsletters-service
          target: /var/www/newsletters-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/newsletters-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - newsletters-db
      - rabbitmq
      - minio

  newsletters-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: newsletters_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_NEWSLETTERS_EXTERNAL_PORT}:3306
    volumes:
      - newsletters-db-data:/var/lib/mysql
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network

  minio:
    image: minio/minio:latest
    container_name: minio-storage
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-adminpass123}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"  # Pour HTTPS
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./services/api-gateway:/var/www/api-gateway
      - ./services/auth-service:/var/www/auth-service
      - ./services/addresses-service:/var/www/addresses-service
      - ./services/products-service:/var/www/products-service
      - ./services/baskets-service:/var/www/baskets-service
      - ./services/deliveries-service:/var/www/deliveries-service
      - ./services/newsletters-service:/var/www/newsletters-service
    develop:
      watch:
        - action: sync
          path: docker/nginx/conf.d
          target: /etc/nginx/conf.d
    networks:
      - microservices-network
    depends_on:
      - api-gateway
      - auth-service
      - addresses-service
      - products-service
      - baskets-service
      - deliveries-service
      - newsletters-service
      - messages-broker
      - sav-service
      - contacts-service
      - websites-service

  sav-service:
    build:
      context: .
      dockerfile: ./services/sav-service/Dockerfile
    volumes:
      - ./services/sav-service:/var/www/sav-service
      - ./shared:/var/www/shared
      - /var/www/sav-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_SAV_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - RABBITMQ_EXCHANGE=sav_exchange
      - RABBITMQ_QUEUE=sav_queue
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-adminpass123}
      - MINIO_BUCKET=sav
      - MINIO_USE_SSL=false
    develop:
      watch:
        - action: sync
          path: services/sav-service
          target: /var/www/sav-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/sav-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - sav-db
      - rabbitmq
      - minio

  sav-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: sav_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_SAV_EXTERNAL_PORT}:3306
    volumes:
      - sav-db-data:/var/lib/mysql
    networks:
      - microservices-network

  contacts-service:
    build:
      context: .
      dockerfile: ./services/contacts-service/Dockerfile
    volumes:
      - ./services/contacts-service:/var/www/contacts-service
      - ./shared:/var/www/shared
      - /var/www/contacts-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_CONTACTS_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - RABBITMQ_EXCHANGE=contacts_exchange
      - RABBITMQ_QUEUE=contacts_queue
    develop:
      watch:
        - action: sync
          path: services/contacts-service
          target: /var/www/contacts-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/contacts-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - contacts-db
      - rabbitmq

  contacts-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: contacts_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_CONTACTS_EXTERNAL_PORT}:3306
    volumes:
      - contacts-db-data:/var/lib/mysql
    networks:
      - microservices-network

  websites-service:
    build:
      context: .
      dockerfile: ./services/websites-service/Dockerfile
    volumes:
      - ./services/websites-service:/var/www/websites-service
      - ./shared:/var/www/shared
      - /var/www/websites-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_WEBSITES_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - RABBITMQ_EXCHANGE=websites_exchange
    develop:
      watch:
        - action: sync
          path: services/websites-service
          target: /var/www/websites-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/websites-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - websites-db
      - rabbitmq

  websites-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: websites_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_WEBSITES_EXTERNAL_PORT}:3306
    volumes:
      - websites-db-data:/var/lib/mysql
    networks:
      - microservices-network

  questions-service:
    build:
      context: .
      dockerfile: ./services/questions-service/Dockerfile
    volumes:
      - ./services/questions-service:/var/www/questions-service
      - ./shared:/var/www/shared
      - /var/www/questions-service/vendor
    environment:
      - APP_ENV=local
      - CONTAINER_ROLE=app
      - DB_HOST=${DB_QUESTIONS_HOST}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - RABBITMQ_EXCHANGE=questions_exchange
    develop:
      watch:
        - action: sync
          path: services/questions-service
          target: /var/www/questions-service
          ignore:
            - vendor/
        - action: rebuild
          path: services/questions-service/composer.json
    networks:
      - microservices-network
    depends_on:
      - questions-db
      - rabbitmq

  questions-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: questions_service_db
      MYSQL_ROOT_PASSWORD: root
    ports:
      - ${DB_QUESTIONS_EXTERNAL_PORT}:3306
    volumes:
      - questions-db-data:/var/lib/mysql
    networks:
      - microservices-network

volumes:
  auth-db-data:
  addresses-db-data:
  products-db-data:
  baskets-db-data:
  orders-db-data:
  deliveries-db-data:
  newsletters-db-data:
  sav-db-data:
  contacts-db-data:
  websites-db-data:
  questions-db-data:
  rabbitmq-data:
  minio-data:
    driver: local

networks:
  microservices-network:
    driver: bridge